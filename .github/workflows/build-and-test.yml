name: Build and test

on:
  push:
  pull_request:
    branches:
      - main
      - release/**
    paths:
      - '**.cs'
      - '**.csproj'
env:
  STEP_TIMEOUT_MINUTES: 60

jobs:
  build-and-test:
    name: build-and-test-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Set test variable
        id: set-variable
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            echo "targetFramework=net8.0-android" >> $GITHUB_ENV
            echo "unoTargets=android wasm" >> $GITHUB_ENV
            echo "name=targetFramework=net8.0-android"
          else if [ ${{ matrix.os }} == 'windows-latest' ]; then
              echo "targetFramework=net8.0-windows" >> $GITHUB_ENV
              echo "unoTargets=win32" >> $GITHUB_ENV
              echo "name=targetFramework=net8.0-windows"
            else
              echo "targetFramework=net8.0-ios" >> $GITHUB_ENV
              echo "unoTargets=ios" >> $GITHUB_ENV
              echo "name=targetFramework=net8.0-ios"
            fi
          fi
        shell: bash

      - name: Install Dependencies
        timeout-minutes: ${{ fromJSON(env.STEP_TIMEOUT_MINUTES) }}
        uses: "./.github/steps/install_dependencies"
        with:
          target-platform: ${{ env.unoTargets }}
        
      - name: Restore dependencies
        run: dotnet restore --ignore-failed-sources

      - name: Build 
        run: dotnet build -p:TargetFramework=${{ env.targetFramework }} --configuration Release --no-restore --ignore-failed-sources

      - name: Test
        run: dotnet test --no-restore --verbosity normal
      
